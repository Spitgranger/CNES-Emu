#include "cpu.hpp"
#include <SDL2/SDL.h>
#include <SDL2/SDL_events.h>
#include <SDL2/SDL_keycode.h>
#include <SDL2/SDL_pixels.h>
#include <SDL2/SDL_render.h>
#include <SDL2/SDL_video.h>
#include <chrono>
#include <fstream>
#include <iostream>
#include <random>
#include <thread>

uint8_t game[] = {
    0x20, 0x06, 0x06, 0x20, 0x38, 0x06, 0x20, 0x0d, 0x06, 0x20, 0x2a, 0x06,
    0x60, 0xa9, 0x02, 0x85, 0x02, 0xa9, 0x04, 0x85, 0x03, 0xa9, 0x11, 0x85,
    0x10, 0xa9, 0x10, 0x85, 0x12, 0xa9, 0x0f, 0x85, 0x14, 0xa9, 0x04, 0x85,
    0x11, 0x85, 0x13, 0x85, 0x15, 0x60, 0xa5, 0xfe, 0x85, 0x00, 0xa5, 0xfe,
    0x29, 0x03, 0x18, 0x69, 0x02, 0x85, 0x01, 0x60, 0x20, 0x4d, 0x06, 0x20,
    0x8d, 0x06, 0x20, 0xc3, 0x06, 0x20, 0x19, 0x07, 0x20, 0x20, 0x07, 0x20,
    0x2d, 0x07, 0x4c, 0x38, 0x06, 0xa5, 0xff, 0xc9, 0x77, 0xf0, 0x0d, 0xc9,
    0x64, 0xf0, 0x14, 0xc9, 0x73, 0xf0, 0x1b, 0xc9, 0x61, 0xf0, 0x22, 0x60,
    0xa9, 0x04, 0x24, 0x02, 0xd0, 0x26, 0xa9, 0x01, 0x85, 0x02, 0x60, 0xa9,
    0x08, 0x24, 0x02, 0xd0, 0x1b, 0xa9, 0x02, 0x85, 0x02, 0x60, 0xa9, 0x01,
    0x24, 0x02, 0xd0, 0x10, 0xa9, 0x04, 0x85, 0x02, 0x60, 0xa9, 0x02, 0x24,
    0x02, 0xd0, 0x05, 0xa9, 0x08, 0x85, 0x02, 0x60, 0x60, 0x20, 0x94, 0x06,
    0x20, 0xa8, 0x06, 0x60, 0xa5, 0x00, 0xc5, 0x10, 0xd0, 0x0d, 0xa5, 0x01,
    0xc5, 0x11, 0xd0, 0x07, 0xe6, 0x03, 0xe6, 0x03, 0x20, 0x2a, 0x06, 0x60,
    0xa2, 0x02, 0xb5, 0x10, 0xc5, 0x10, 0xd0, 0x06, 0xb5, 0x11, 0xc5, 0x11,
    0xf0, 0x09, 0xe8, 0xe8, 0xe4, 0x03, 0xf0, 0x06, 0x4c, 0xaa, 0x06, 0x4c,
    0x35, 0x07, 0x60, 0xa6, 0x03, 0xca, 0x8a, 0xb5, 0x10, 0x95, 0x12, 0xca,
    0x10, 0xf9, 0xa5, 0x02, 0x4a, 0xb0, 0x09, 0x4a, 0xb0, 0x19, 0x4a, 0xb0,
    0x1f, 0x4a, 0xb0, 0x2f, 0xa5, 0x10, 0x38, 0xe9, 0x20, 0x85, 0x10, 0x90,
    0x01, 0x60, 0xc6, 0x11, 0xa9, 0x01, 0xc5, 0x11, 0xf0, 0x28, 0x60, 0xe6,
    0x10, 0xa9, 0x1f, 0x24, 0x10, 0xf0, 0x1f, 0x60, 0xa5, 0x10, 0x18, 0x69,
    0x20, 0x85, 0x10, 0xb0, 0x01, 0x60, 0xe6, 0x11, 0xa9, 0x06, 0xc5, 0x11,
    0xf0, 0x0c, 0x60, 0xc6, 0x10, 0xa5, 0x10, 0x29, 0x1f, 0xc9, 0x1f, 0xf0,
    0x01, 0x60, 0x4c, 0x35, 0x07, 0xa0, 0x00, 0xa5, 0xfe, 0x91, 0x00, 0x60,
    0xa6, 0x03, 0xa9, 0x00, 0x81, 0x10, 0xa2, 0x00, 0xa9, 0x01, 0x81, 0x10,
    0x60, 0xa2, 0x00, 0xea, 0xea, 0xca, 0xd0, 0xfb, 0x60};

uint8_t screenState[32 * 3 * 32] = {0};

std::default_random_engine generator;
std::uniform_int_distribution<uint8_t> distribution(1, 16);

void processInput(CPU *cpu) {
  SDL_Event event;

  while (SDL_PollEvent(&event)) {
    switch (event.type) {
    case SDL_QUIT:
      exit(0);
      break;
    case SDL_KEYDOWN:
      switch (event.key.keysym.sym) {
      case SDLK_w:
        cpu->writeToMemory(0xff, 0x77);
        break;
      case SDLK_s:
        cpu->writeToMemory(0xff, 0x73);
        break;
      case SDLK_a:
        cpu->writeToMemory(0xff, 0x61);
        break;
      case SDLK_d:
        cpu->writeToMemory(0xff, 0x64);
        break;
      }
    }
  }
}

SDL_Color mapColor(uint8_t byte) {
  switch (byte) {
  case 0:
    return {0, 0, 0, 255};
  case 1:
    return {255, 255, 255, 255};
  case 2:
  case 9:
    return {120, 120, 120, 255};
  case 3:
  case 10:
    return {255, 0, 0, 255};
  case 4:
  case 11:
    return {0, 255, 0, 255};
  case 5:
  case 12:
    return {0, 0, 255, 255};
  case 6:
  case 13:
    return {255, 0, 255, 255};
  case 7:
  case 14:
    return {255, 255, 0, 255};
  }
  return {0, 255, 255, 255};
}

bool readScreenState(CPU *cpu, uint8_t frame[32 * 3 * 32]) {
  uint16_t frameIndex = 0;
  bool update = false;
  for (uint16_t i = 0x0200; i < 0x0600; i++) {
    uint8_t colorIndex = cpu->readFromMemory(i);
    //    std::cout << std::hex << static_cast<int>(colorIndex) << "\n";
    SDL_Color color = mapColor(colorIndex);
    uint8_t r = color.r;
    uint8_t g = color.g;
    uint8_t b = color.b;
    if (frame[frameIndex] != r || frame[frameIndex + 1] != g ||
        frame[frameIndex + 2] != b) {
      frame[frameIndex] = r;
      frame[frameIndex + 1] = g;
      frame[frameIndex + 2] = b;
      update = true;
    }
    frameIndex += 3;
  }
  return update;
}

int main() {
  std::ifstream input("./nestest.nes", std::ios::binary);
  std::vector<uint8_t> buffer(std::istreambuf_iterator<char>(input), {});
  if (SDL_Init(SDL_INIT_VIDEO) < 0) {
    std::cout << "Error" << SDL_GetError();
  }
  SDL_Window *window =
      SDL_CreateWindow("test", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED,
                       32 * 10, 32 * 10, SDL_WINDOW_SHOWN);
  if (window == NULL) {
    std::cout << "Error creating window" << "\n";
  }
  SDL_Renderer *renderer =
      SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
  if (renderer == NULL) {
    std::cout << "Error creating renderer" << "\n";
  }
  SDL_RenderSetScale(renderer, 10, 10);
  SDL_Texture *texture = SDL_CreateTexture(renderer, SDL_PIXELFORMAT_RGB24,
                                           SDL_TEXTUREACCESS_STREAMING, 32, 32);
  if (texture == NULL) {
    std::cout << "Error creating texture" << "\n";
  }
  Bus bus = Bus(buffer);
  CPU cpu = CPU(bus);
  //cpu.loadProgram(game, sizeof(game));
  cpu.reset();
  cpu.PC = 0x8000;
  cpu.interpretWithCB([&](CPU *cpu) {
    processInput(cpu);
//    cpu->writeToMemory(0xfe, distribution(generator));
    if (readScreenState(cpu, screenState)) {
      SDL_UpdateTexture(texture, nullptr, screenState, 32 * 3);
      SDL_RenderClear(renderer);
      SDL_RenderCopy(renderer, texture, nullptr, nullptr);
      SDL_RenderPresent(renderer);
    }
    std::this_thread::sleep_for(std::chrono::microseconds(32));
  });
}
